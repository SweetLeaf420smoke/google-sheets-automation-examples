
// ===== Ozon API Automation =====
// –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Ozon API –≤ Google Sheets
// ‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏ –ª–∏—Å—Ç "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" —Å–≤–æ–∏–º–∏ –∫–ª—é—á–∞–º–∏:
// B2 = Client-Id, B3 = Api-Key, B4 = –î–∞—Ç–∞ –æ—Ç, B5 = –î–∞—Ç–∞ –¥–æ
// B6 = Service Account, B7 = Client Performance, B8 = Secret Performance

===== buildOzonFullPivot =====
function buildOzonFullPivot() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = "–û–∑–æ–Ω –°–≤–æ–¥–Ω–∞—è –û–±—â–∞—è";
  const outSheet = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);
  outSheet.clear();

  // --- —á–∏—Ç–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
  const adsSheet = ss.getSheetByName("–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ò—Ç–æ–≥ –í—Å–µ –î–∞–Ω–Ω—ã–µ");
  if (!adsSheet) throw new Error("–ù–µ—Ç –ª–∏—Å—Ç–∞ '–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ò—Ç–æ–≥ –í—Å–µ –î–∞–Ω–Ω—ã–µ'");
  const adsData = adsSheet.getDataRange().getValues();
  const adsHeaders = adsData.shift();

  // --- —á–∏—Ç–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É ---
  const analSheet = ss.getSheetByName("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞");
  if (!analSheet) throw new Error("–ù–µ—Ç –ª–∏—Å—Ç–∞ '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'");
  const analData = analSheet.getDataRange().getValues();
  const analHeaders = analData.shift();

  // --- —á–∏—Ç–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ---
  const tranSheet = ss.getSheetByName("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
  if (!tranSheet) throw new Error("–ù–µ—Ç –ª–∏—Å—Ç–∞ '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'");
  const tranData = tranSheet.getDataRange().getValues();
  const tranHeaders = tranData.shift();

  // --- —á–∏—Ç–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ ---
  const stockSheet = ss.getSheetByName("–û—Å—Ç–∞—Ç–∫–∏");
  if (!stockSheet) throw new Error("–ù–µ—Ç –ª–∏—Å—Ç–∞ '–û—Å—Ç–∞—Ç–∫–∏'");
  const stockData = stockSheet.getDataRange().getValues();
  const stockHeaders = stockData.shift();

  // =======================
  // –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
  // =======================
  const idxAdsSKU   = adsHeaders.indexOf("SKU");
  const idxAdsDate  = adsHeaders.indexOf("–î–∞—Ç–∞");
  const idxAdsViews = adsHeaders.indexOf("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã");
  const idxAdsClicks= adsHeaders.indexOf("–ö–ª–∏–∫–∏");
  const idxAdsOrders= adsHeaders.indexOf("–ó–∞–∫–∞–∑—ã");
  const idxAdsMoney = adsHeaders.indexOf("–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ ‚ÇΩ");
  const idxAdsSpent = adsHeaders.indexOf("–†–∞—Å—Ö–æ–¥ ‚ÇΩ");

  const idxAnalSKU  = analHeaders.indexOf("sku");
  const idxAnalDate = analHeaders.indexOf("day");
  const idxAnalRev  = analHeaders.indexOf("revenue");
  const idxAnalUnits= analHeaders.indexOf("ordered_units");

  const idxTranSKU  = tranHeaders.indexOf("sku");
  const idxTranDate = tranHeaders.indexOf("order_date");
  const idxTranAmt  = tranHeaders.indexOf("amount");
  const idxTranType = tranHeaders.indexOf("type");

  const idxStockSKU = stockHeaders.indexOf("sku");
  const idxStockName= stockHeaders.indexOf("name");
  const idxStockAvail = stockHeaders.indexOf("available_stock_count");

  // =======================
  // –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  // =======================
  function normDate(d) {
    if (!d) return "";
    try {
      if (Object.prototype.toString.call(d) === "[object Date]") {
        return Utilities.formatDate(d, Session.getScriptTimeZone(), "yyyy-MM-dd");
      } else {
        return Utilities.formatDate(new Date(d), Session.getScriptTimeZone(), "yyyy-MM-dd");
      }
    } catch(e) {
      return d.toString().substring(0,10);
    }
  }

  const pivot = {};
  function key(sku, date) {
    return sku + "_" + date;
  }

  // =======================
  // —Ä–µ–∫–ª–∞–º–∞
  // =======================
  adsData.forEach(r => {
    const sku = r[idxAdsSKU];
    const date = normDate(r[idxAdsDate]);
    if (!sku || !date) return;
    const k = key(sku, date);
    if (!pivot[k]) pivot[k] = {sku, date};
    pivot[k].adsViews  = (pivot[k].adsViews || 0) + (r[idxAdsViews] || 0);
    pivot[k].adsClicks = (pivot[k].adsClicks|| 0) + (r[idxAdsClicks]|| 0);
    pivot[k].adsOrders = (pivot[k].adsOrders|| 0) + (r[idxAdsOrders]|| 0);
    pivot[k].adsMoney  = (pivot[k].adsMoney || 0) + (r[idxAdsMoney] || 0);
    pivot[k].adsSpent  = (pivot[k].adsSpent || 0) + (r[idxAdsSpent] || 0);
  });

  // =======================
  // –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
  // =======================
  analData.forEach(r => {
    const sku = r[idxAnalSKU];
    const date = normDate(r[idxAnalDate]);
    if (!sku || !date) return;
    const k = key(sku, date);
    if (!pivot[k]) pivot[k] = {sku, date};
    pivot[k].orgRevenue = (pivot[k].orgRevenue||0) + (r[idxAnalRev] || 0);
    pivot[k].orgUnits   = (pivot[k].orgUnits  ||0) + (r[idxAnalUnits] || 0);
  });

  // =======================
  // —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  // =======================
  tranData.forEach(r => {
    const sku = r[idxTranSKU];
    const date = normDate(r[idxTranDate]);
    if (!sku || !date) return;
    const k = key(sku, date);
    if (!pivot[k]) pivot[k] = {sku, date};
    if (r[idxTranType] === "orders") {
      pivot[k].tranOrders = (pivot[k].tranOrders||0) + (r[idxTranAmt] || 0);
    } else if (r[idxTranType] === "returns") {
      pivot[k].tranReturns = (pivot[k].tranReturns||0) + (r[idxTranAmt] || 0);
    }
  });

  // =======================
  // –æ—Å—Ç–∞—Ç–∫–∏
  // =======================
  const stockBySku = {};
  const nameBySku  = {};
  stockData.forEach(r => {
    const sku = r[idxStockSKU];
    if (!sku) return;
    stockBySku[sku] = r[idxStockAvail] || 0;
    nameBySku[sku]  = r[idxStockName]  || "";
  });

  // =======================
  // —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
  // =======================
  const headers = [
    "SKU","–ù–∞–∑–≤–∞–Ω–∏–µ",
    "–î–∞—Ç–∞",
    "–†–µ–∫–ª.–ü–æ–∫–∞–∑—ã","–†–µ–∫–ª.–ö–ª–∏–∫–∏","–†–µ–∫–ª.–ó–∞–∫–∞–∑—ã","–†–µ–∫–ª.–°—É–º–º–∞ ‚ÇΩ","–†–µ–∫–ª.–†–∞—Å—Ö–æ–¥ ‚ÇΩ",
    "–û—Ä–≥.–í—ã—Ä—É—á–∫–∞ ‚ÇΩ","–û—Ä–≥.–ó–∞–∫–∞–∑—ã",
    "–¢—Ä–∞–Ω–∑.–ó–∞–∫–∞–∑—ã ‚ÇΩ","–¢—Ä–∞–Ω–∑.–í–æ–∑–≤—Ä–∞—Ç—ã ‚ÇΩ",
    "–û—Å—Ç–∞—Ç–æ–∫"
  ];
  const result = [headers];

  Object.values(pivot).forEach(v => {
    result.push([
      v.sku,
      nameBySku[v.sku] || "",
      v.date,
      v.adsViews||0,
      v.adsClicks||0,
      v.adsOrders||0,
      v.adsMoney||0,
      v.adsSpent||0,
      v.orgRevenue||0,
      v.orgUnits||0,
      v.tranOrders||0,
      v.tranReturns||0,
      stockBySku[v.sku]||0
    ]);
  });

  // =======================
  // –∑–∞–ø–∏—Å—å
  // =======================
  outSheet.getRange(1,1,result.length,result[0].length).setValues(result);
  Logger.log("‚úÖ –°–≤–æ–¥–Ω–∞—è –æ–±—â–∞—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞: " + (result.length-1) + " —Å—Ç—Ä–æ–∫");
}

===== checkAllSheetsHeaders =====
function checkAllSheetsHeaders() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheets = ss.getSheets();

  sheets.forEach(sh => {
    const name = sh.getName();
    const values = sh.getDataRange().getValues();
    if (values.length === 0) {
      Logger.log("‚ùå " + name + " ‚Äî –ø—É—Å—Ç–æ–π –ª–∏—Å—Ç");
      return;
    }
    const headers = values[0];
    Logger.log("‚úÖ " + name + " ‚Äî " + JSON.stringify(headers));
  });
}

===== exportAllFunctionsCodeFast =====
function exportAllFunctionsCodeFast() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("Ozon_Functions") || ss.insertSheet("Ozon_Functions");
  sheet.clear();

  const global = this;
  const functions = [];

  for (let key in global) {
    if (typeof global[key] === "function") {
      functions.push(key);
    }
  }

  functions.sort();

  const rows = [];
  functions.forEach(fnName => {
    try {
      const code = global[fnName].toString().split("\n");
      rows.push(["'===== " + fnName + " ====="]);   // –∑–∞–≥–æ–ª–æ–≤–æ–∫
      code.forEach(line => rows.push(["'" + line])); // —Å–∞–º –∫–æ–¥
      rows.push([""]); // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    } catch (e) {
      rows.push(["'===== " + fnName + " (–∫–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω) ====="]);
      rows.push([""]);
    }
  });

  if (rows.length > 0) {
    sheet.getRange(1, 1, rows.length, 1).setValues(rows);
  }

  Logger.log("‚úÖ –í—ã–≥—Ä—É–∂–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: " + functions.length);
}

===== exportOzonAdsCampaigns =====
function exportOzonAdsCampaigns() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = "–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ö–∞–º–ø–∞–Ω–∏–∏";
  const sheet = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);
  sheet.clear();

  const token = getPerformanceToken();
  const url = "https://api-performance.ozon.ru/api/client/campaign?page=1&pageSize=100";

  const resp = UrlFetchApp.fetch(url, {
    method: "get",
    headers: { Authorization: "Bearer " + token },
    muteHttpExceptions: true
  });

  if (resp.getResponseCode() !== 200) {
    throw new Error("–û—à–∏–±–∫–∞ HTTP " + resp.getResponseCode() + ": " + resp.getContentText());
  }

  const json = JSON.parse(resp.getContentText());
  const campaigns = json.list || [];
  Logger.log("üìä –ü–æ–ª—É—á–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: " + campaigns.length);

  if (!campaigns.length) return;

  const headers = [
    "ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å", "–¢–∏–ø", "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", "–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞",
    "–î–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç", "–ù–µ–¥–µ–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç", "–ë—é–¥–∂–µ—Ç", "–û–ø–ª–∞—Ç–∞",
    "–°–æ–∑–¥–∞–Ω–∞", "–û–±–Ω–æ–≤–ª–µ–Ω–∞", "–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ç–µ–≥–∏—è"
  ];
  sheet.appendRow(headers);

  const fmt = s => s ? Utilities.formatDate(new Date(s), Session.getScriptTimeZone(), "yyyy-MM-dd HH:mm:ss") : "";

  const rows = campaigns.map(c => [
    c.id || "",
    c.title || "",
    c.state || "",
    c.advObjectType || "",
    c.fromDate || "",
    c.toDate || "",
    c.dailyBudget || "",
    c.weeklyBudget || "",
    c.budget || "",
    c.PaymentType || "",
    fmt(c.createdAt),
    fmt(c.updatedAt),
    c.productAutopilotStrategy || ""
  ]);

  sheet.getRange(2, 1, rows.length, rows[0].length).setValues(rows);
  Logger.log("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ —Å—Ç—Ä–æ–∫: " + rows.length);
}

===== exportOzonAdsDaily =====
function exportOzonAdsDaily() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = '–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –î–Ω–µ–≤–Ω–∞—è';
  const sheet = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);
  sheet.clear();

  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  if (!settings) throw new Error("–ù–µ—Ç –ª–∏—Å—Ç–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'");
  const dateFrom = settings.getRange("B4").getValue();
  const dateTo   = settings.getRange("B5").getValue();

  const format = d => Utilities.formatDate(new Date(d), Session.getScriptTimeZone(), 'yyyy-MM-dd');
  const fromStr = format(dateFrom);
  const toStr   = format(dateTo);

  const token = getPerformanceToken();

  const url = 'https://api-performance.ozon.ru/api/client/statistics/daily/json' +
              '?dateFrom=' + fromStr +
              '&dateTo=' + toStr;

  Logger.log('GET ' + url);

  const resp = UrlFetchApp.fetch(url, {
    method : 'get',
    headers: { 'Authorization': 'Bearer ' + token },
    muteHttpExceptions: true
  });

  if (resp.getResponseCode() !== 200) {
    throw new Error('–û—à–∏–±–∫–∞ HTTP ' + resp.getResponseCode() + ': ' + resp.getContentText());
  }

  const json = JSON.parse(resp.getContentText());
  const arr = json.content || json.data || json.rows || [];
  Logger.log('üìä –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: ' + arr.length);

  if (!arr.length) return;

  sheet.appendRow([
    'Campaign ID', 'Title', 'Date',
    'Views', 'Clicks', 'Spent, ‚ÇΩ',
    'Avg Bid, ‚ÇΩ', 'Orders', 'Orders Money, ‚ÇΩ'
  ]);

  const rows = arr.map(r => [
    r.campaignId || r.id || '',
    r.title      || '',
    r.date       || '',
    r.views      || 0,
    r.clicks     || 0,
    r.moneySpent || 0,
    r.avgBid     || 0,
    r.orders     || 0,
    r.ordersMoney|| 0
  ]);

  sheet.getRange(2, 1, rows.length, rows[0].length).setValues(rows);
  Logger.log(`‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${rows.length}`);
}

===== exportOzonAdsDailyExpense =====
function exportOzonAdsDailyExpense() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = "–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ò—Ç–æ–≥";
  const sheet = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);
  sheet.clear();

  // –¥–∞—Ç—ã –∏–∑ –ª–∏—Å—Ç–∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  const dateFrom = Utilities.formatDate(new Date(settings.getRange("B4").getValue()), "GMT+3", "yyyy-MM-dd");
  const dateTo   = Utilities.formatDate(new Date(settings.getRange("B5").getValue()), "GMT+3", "yyyy-MM-dd");
  const token = getPerformanceToken();

  // --- 1. daily ---
  const urlDaily = "https://api-performance.ozon.ru/api/client/statistics/daily/json"
    + "?dateFrom=" + dateFrom + "&dateTo=" + dateTo;
  const respDaily = UrlFetchApp.fetch(urlDaily, {
    method: "get",
    headers: { Authorization: "Bearer " + token },
    muteHttpExceptions: true
  });
  const daily = JSON.parse(respDaily.getContentText()).rows || [];
  Logger.log("‚úÖ daily –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: %s", daily.length);

  // --- 2. expense ---
  const urlExpense = "https://api-performance.ozon.ru/api/client/statistics/expense/json"
    + "?dateFrom=" + dateFrom + "&dateTo=" + dateTo;
  const respExpense = UrlFetchApp.fetch(urlExpense, {
    method: "get",
    headers: { Authorization: "Bearer " + token },
    muteHttpExceptions: true
  });
  const expense = JSON.parse(respExpense.getContentText()).rows || [];
  Logger.log("‚úÖ expense –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: %s", expense.length);

  const expenseMap = {};
  expense.forEach(r => {
    const key = r.id + "_" + r.date;
    expenseMap[key] = r;
  });

  // --- 3. Campaign Stats (–¥–ª—è CTR) ---
  const urlGen = "https://api-performance.ozon.ru/api/client/statistics/json";
  const campaignIds = [...new Set(daily.map(r => r.id))];
  const payload = { campaigns: campaignIds, dateFrom, dateTo, groupBy: "DATE" };
  const respGen = UrlFetchApp.fetch(urlGen, {
    method: "post",
    contentType: "application/json",
    headers: { Authorization: "Bearer " + token },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });
  const uuid = JSON.parse(respGen.getContentText()).UUID;
  if (!uuid) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç CTR");

  let state = "NOT_STARTED";
  for (let i = 0; i < 30; i++) {
    const statusUrl = "https://api-performance.ozon.ru/api/client/statistics/" + uuid;
    const respStatus = UrlFetchApp.fetch(statusUrl, {
      method: "get",
      headers: { Authorization: "Bearer " + token }
    });
    const status = JSON.parse(respStatus.getContentText());
    state = status.state || "UNKNOWN";
    if (state === "OK") break;
    if (state === "ERROR") throw new Error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CTR –æ—Ç—á—ë—Ç–∞");
    Utilities.sleep(3000);
  }

  if (state !== "OK") throw new Error("CTR –æ—Ç—á—ë—Ç –Ω–µ –≥–æ—Ç–æ–≤");

  const urlReport = "https://api-performance.ozon.ru/api/client/statistics/report?UUID=" + uuid;
  const respReport = UrlFetchApp.fetch(urlReport, {
    method: "get",
    headers: { Authorization: "Bearer " + token }
  });
  const ctrJson = JSON.parse(respReport.getContentText());

  const ctrMap = {};
  Object.keys(ctrJson).forEach(cid => {
    const rows = (ctrJson[cid].report && ctrJson[cid].report.rows) || [];
    rows.forEach(r => {
      let d = r.date;
      if (d.includes(".")) {
        const parts = d.split(".");
        d = `${parts[2]}-${parts[1].padStart(2,"0")}-${parts[0].padStart(2,"0")}`;
      }
      const key = cid + "_" + d;
      ctrMap[key] = parseFloat(r.ctr) || 0;
    });
  });

  // --- 4. –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ ---
  const headers = [
    "Campaign ID","Title","Date",
    "Views","Clicks","CTR %","Avg Bid ‚ÇΩ",
    "Orders","Orders Money ‚ÇΩ",
    "Spent ‚ÇΩ","Bonus ‚ÇΩ","Prepayment ‚ÇΩ"
  ];
  sheet.appendRow(headers);

  const rows = daily.map(r => {
    const key = r.id + "_" + r.date;
    const e = expenseMap[key] || {};
    const ctrVal = ctrMap[key] || (r.views > 0 ? (r.clicks / r.views * 100) : 0);

    return [
      r.id || "",
      r.title || "",
      r.date || "",
      r.views || 0,
      r.clicks || 0,
      ctrVal,
      r.avgBid || 0,
      r.orders || 0,
      r.ordersMoney || 0,
      e.moneySpent || 0,
      e.bonusSpent || 0,
      e.prepaymentSpent || 0
    ];
  });

  sheet.getRange(2, 1, rows.length, headers.length).setValues(rows);
  Logger.log("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ —Å—Ç—Ä–æ–∫: " + rows.length);
}

===== exportOzonAdsExpense =====
function exportOzonAdsExpense() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = "–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –†–∞—Å—Ö–æ–¥—ã";
  const sheet = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);
  sheet.clear();

  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  if (!settings) throw new Error("–ù–µ—Ç –ª–∏—Å—Ç–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'");
  const dateFrom = settings.getRange("B4").getValue();
  const dateTo   = settings.getRange("B5").getValue();

  const format = d => Utilities.formatDate(new Date(d), Session.getScriptTimeZone(), "yyyy-MM-dd");
  const fromStr = format(dateFrom);
  const toStr   = format(dateTo);

  const token = getPerformanceToken();

  const url = "https://api-performance.ozon.ru/api/client/statistics/expense/json" +
              "?dateFrom=" + fromStr +
              "&dateTo=" + toStr;

  Logger.log("GET " + url);

  const resp = UrlFetchApp.fetch(url, {
    method: "get",
    headers: { Authorization: "Bearer " + token },
    muteHttpExceptions: true
  });

  if (resp.getResponseCode() !== 200) {
    throw new Error("–û—à–∏–±–∫–∞ HTTP " + resp.getResponseCode() + ": " + resp.getContentText());
  }

  const json = JSON.parse(resp.getContentText());
  const arr = json.rows || [];
  Logger.log("üìä –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: " + arr.length);

  if (!arr.length) return;

  sheet.appendRow(["Campaign ID", "Title", "Date", "Spent ‚ÇΩ", "Bonus ‚ÇΩ", "Prepayment ‚ÇΩ"]);

  const rows = arr.map(r => [
    r.id || "",
    r.title || "",
    r.date || "",
    r.moneySpent || "0",
    r.bonusSpent || "0",
    r.prepaymentSpent || "0"
  ]);

  sheet.getRange(2, 1, rows.length, rows[0].length).setValues(rows);
  Logger.log(`‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${rows.length}`);
}

===== exportOzonAdsFullReport =====
function exportOzonAdsFullReport() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = "–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ò—Ç–æ–≥ –í—Å–µ –î–∞–Ω–Ω—ã–µ";
  const sheet = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);
  sheet.clear();

  const dailySheet   = ss.getSheetByName("–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ò—Ç–æ–≥");
  const productsSheet= ss.getSheetByName("–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ü—Ä–æ–¥—É–∫—Ç—ã");
  const ordersSheet  = ss.getSheetByName("–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ó–∞–∫–∞–∑—ã");

  if (!dailySheet || !productsSheet || !ordersSheet) {
    throw new Error("–ù—É–∂–Ω—ã –ª–∏—Å—Ç—ã '–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ò—Ç–æ–≥', '–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ü—Ä–æ–¥—É–∫—Ç—ã' –∏ '–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ó–∞–∫–∞–∑—ã'");
  }

  const dailyData = dailySheet.getDataRange().getValues();
  const dailyHeaders = dailyData.shift();

  const prodData = productsSheet.getDataRange().getValues();
  const prodHeaders = prodData.shift();
  const idxProdSKU = prodHeaders.indexOf("SKU");
  const idxProdTitle = prodHeaders.indexOf("Title");
  const idxProdPrice = prodHeaders.indexOf("Price");
  const prodBySKU = {};
  prodData.forEach(r => {
    const sku = r[idxProdSKU];
    if (sku) prodBySKU[sku] = r;
  });

  const ordersData = ordersSheet.getDataRange().getValues();
  const ordersHeaders = ordersData.shift();
  const idxOrdSKU = ordersHeaders.indexOf("sku");
  const idxOrdDate = ordersHeaders.indexOf("date");
  const idxOrdQty = ordersHeaders.indexOf("quantity");
  const idxOrdPrice = ordersHeaders.indexOf("price");
  const idxOrdSalePrice = ordersHeaders.indexOf("salePrice");

  const ordersByDate = {};
  ordersData.forEach(r => {
    const dateRaw = r[idxOrdDate];
    const sku = r[idxOrdSKU];
    if (!dateRaw || !sku) return;

    const date = parseOrderDate(dateRaw);
    if (!ordersByDate[date]) ordersByDate[date] = [];
    ordersByDate[date].push(r);
  });

  const headers = [
    "ID –∫–∞–º–ø–∞–Ω–∏–∏","–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏","SKU","–î–∞—Ç–∞",
    "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã","–ö–ª–∏–∫–∏","CTR %","–†–∞—Å—Ö–æ–¥ ‚ÇΩ","–°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ ‚ÇΩ",
    "–ó–∞–∫–∞–∑—ã","–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ ‚ÇΩ",
    "–ö–æ–ª-–≤–æ (–∏–∑ –∑–∞–∫–∞–∑–æ–≤)","–°—É–º–º–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º ‚ÇΩ",
    "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞","–¶–µ–Ω–∞ ‚ÇΩ"
  ];
  const result = [headers];

  dailyData.forEach(r => {
    const campaignId = r[0];
    const title = r[1];
    const date = Utilities.formatDate(new Date(r[2]), "GMT+2", "yyyy-MM-dd");
    const views = r[3];
    const clicks = r[4];
    const ctr = r[5];
    const avgBid = r[6];
    const orders = r[7];
    const ordersMoney = r[8];
    const spent = r[9];

    const dayOrders = ordersByDate[date] || [];

    if (dayOrders.length > 0) {
      dayOrders.forEach(ord => {
        const sku = ord[idxOrdSKU] || "";
        const qty = Number(ord[idxOrdQty]) || 0;
        let salePrice = parseNumber(ord[idxOrdSalePrice]);
        if (!salePrice) salePrice = parseNumber(ord[idxOrdPrice]);
        const salesSum = qty * salePrice;

        let prodTitle = "";
        let price = "";
        if (prodBySKU[sku]) {
          prodTitle = prodBySKU[sku][idxProdTitle] || "";
          price = prodBySKU[sku][idxProdPrice] || "";
        }
        result.push([
          campaignId, title, sku, date,
          views, clicks, ctr, spent, avgBid,
          orders, ordersMoney,
          qty, salesSum,
          prodTitle, price
        ]);
      });
    } else {
      result.push([
        campaignId, title, "", date,
        views, clicks, ctr, spent, avgBid,
        orders, ordersMoney,
        "", "",
        "", ""
      ]);
    }
  });

  sheet.getRange(1,1,result.length,result[0].length).setValues(result);
  Logger.log("‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–±—Ä–∞–Ω–∞: " + (result.length-1) + " —Å—Ç—Ä–æ–∫");
}

===== exportOzonAdsOrdersReport =====
function exportOzonAdsOrdersReport() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = "–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ó–∞–∫–∞–∑—ã";
  const sheet = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);
  sheet.clear();

  // –¥–∞—Ç—ã –∏–∑ –ª–∏—Å—Ç–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  if (!settings) throw new Error("–ù–µ—Ç –ª–∏—Å—Ç–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'");
  const dateFrom = new Date(settings.getRange("B4").getValue());
  const dateTo   = new Date(settings.getRange("B5").getValue());

  const token = getPerformanceToken();

  // —à–∞–≥ 1 ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
  const urlGenerate = "https://api-performance.ozon.ru/api/client/statistic/orders/generate/json";
  const payload = { from: dateFrom.toISOString(), to: dateTo.toISOString() };
  const respGenerate = UrlFetchApp.fetch(urlGenerate, {
    method: "post",
    contentType: "application/json",
    headers: { Authorization: "Bearer " + token },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  const genJson = JSON.parse(respGenerate.getContentText());
  if (!genJson.UUID) throw new Error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + respGenerate.getContentText());
  const uuid = genJson.UUID;
  Logger.log("üü¢ UUID –æ—Ç—á—ë—Ç–∞: " + uuid);

  // —à–∞–≥ 2 ‚Äî –∂–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  let state = "Pending";
  for (let i = 0; i < 30; i++) { // –º–∞–∫—Å–∏–º—É–º 30 –ø–æ–ø—ã—Ç–æ–∫
    const urlStatus = "https://api-performance.ozon.ru/api/client/statistics/" + uuid;
    const respStatus = UrlFetchApp.fetch(urlStatus, {
      method: "get",
      headers: { Authorization: "Bearer " + token },
      muteHttpExceptions: true
    });
    const statusJson = JSON.parse(respStatus.getContentText());
    state = statusJson.state || "UNKNOWN";
    Logger.log("‚è≥ –ü–æ–ø—ã—Ç–∫–∞ " + (i+1) + ": " + state);

    if (state === "OK") break;
    if (state === "ERROR") throw new Error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞");
    Utilities.sleep(5000); // –ø–æ–¥–æ–∂–¥–∞—Ç—å 5 —Å–µ–∫
  }

  if (state !== "OK") throw new Error("–û—Ç—á—ë—Ç –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");

  // —à–∞–≥ 3 ‚Äî —Å–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const urlReport = "https://api-performance.ozon.ru/api/client/statistics/report?UUID=" + uuid;
  const respReport = UrlFetchApp.fetch(urlReport, {
    method: "get",
    headers: { Authorization: "Bearer " + token },
    muteHttpExceptions: true
  });

  const reportText = respReport.getContentText();
  let rows;
  try {
    const json = JSON.parse(reportText);
    if (!json.rows || !json.rows.length) throw new Error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");
    rows = json.rows;
  } catch(e) {
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç—á—ë—Ç–∞: " + e);
  }

  // —à–∞–≥ 4 ‚Äî –ø–∏—à–µ–º –≤ –ª–∏—Å—Ç
  const headers = Object.keys(rows[0]);
  const data = [headers];
  rows.forEach(r => data.push(headers.map(h => r[h] || "")));

  sheet.getRange(1, 1, data.length, data[0].length).setValues(data);
  Logger.log("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: " + rows.length);
}

===== exportOzonAdsProductsReport =====
function exportOzonAdsProductsReport() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = "–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ü—Ä–æ–¥—É–∫—Ç—ã";
  const sheet = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);
  sheet.clear();

  // –¥–∞—Ç—ã –∏–∑ –ª–∏—Å—Ç–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  const dateFrom = new Date(settings.getRange("B4").getValue());
  const dateTo   = new Date(settings.getRange("B5").getValue());
  const token = getPerformanceToken();

  // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
  const urlGenerate = "https://api-performance.ozon.ru/api/client/statistic/products/generate/json";
  const payload = { from: dateFrom.toISOString(), to: dateTo.toISOString() };
  const respGenerate = UrlFetchApp.fetch(urlGenerate, {
    method: "post",
    contentType: "application/json",
    headers: { Authorization: "Bearer " + token },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  const genJson = JSON.parse(respGenerate.getContentText());
  if (!genJson.UUID) throw new Error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + respGenerate.getContentText());
  const uuid = genJson.UUID;
  Logger.log("üü¢ UUID –æ—Ç—á—ë—Ç–∞: " + uuid);

  // 2. –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  let state = "Pending";
  for (let i = 0; i < 30; i++) {
    const urlStatus = "https://api-performance.ozon.ru/api/client/statistics/" + uuid;
    const respStatus = UrlFetchApp.fetch(urlStatus, {
      method: "get",
      headers: { Authorization: "Bearer " + token },
      muteHttpExceptions: true
    });
    const statusJson = JSON.parse(respStatus.getContentText());
    state = statusJson.state || "UNKNOWN";
    Logger.log("‚è≥ –ü–æ–ø—ã—Ç–∫–∞ " + (i+1) + ": " + state);

    if (state === "OK") break;
    if (state === "ERROR") throw new Error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞");
    Utilities.sleep(5000);
  }

  if (state !== "OK") throw new Error("–û—Ç—á—ë—Ç –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");

  // 3. –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const urlReport = "https://api-performance.ozon.ru/api/client/statistics/report?UUID=" + uuid;
  const respReport = UrlFetchApp.fetch(urlReport, {
    method: "get",
    headers: { Authorization: "Bearer " + token },
    muteHttpExceptions: true
  });

  const reportText = respReport.getContentText();
  const json = JSON.parse(reportText);
  if (!json.rows || !json.rows.length) throw new Error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");

  // 4. –ü–∏—à–µ–º –≤ –ª–∏—Å—Ç
  const headers = Object.keys(json.rows[0]);
  const data = [headers];
  json.rows.forEach(r => data.push(headers.map(h => r[h] || "")));

  sheet.getRange(1, 1, data.length, data[0].length).setValues(data);
  Logger.log("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: " + json.rows.length);
}

===== exportOzonAdsStatsWithCTR =====
function exportOzonAdsStatsWithCTR() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = "–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ò—Ç–æ–≥ CTR";
  const sheet = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);
  sheet.clear();

  // –¥–∞—Ç—ã –∏–∑ –ª–∏—Å—Ç–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  const dateFrom = Utilities.formatDate(new Date(settings.getRange("B4").getValue()), "GMT+3", "yyyy-MM-dd");
  const dateTo   = Utilities.formatDate(new Date(settings.getRange("B5").getValue()), "GMT+3", "yyyy-MM-dd");
  const token = getPerformanceToken();

  // --- –±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö campaignId –∏–∑ –ª–∏—Å—Ç–∞ "–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ò—Ç–æ–≥"
  const dailySheet = ss.getSheetByName("–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ò—Ç–æ–≥");
  if (!dailySheet) throw new Error("–ù–µ—Ç –ª–∏—Å—Ç–∞ '–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ò—Ç–æ–≥'");
  const ids = dailySheet.getRange(2, 1, dailySheet.getLastRow()-1, 1).getValues()
    .map(r => String(r[0]).trim())
    .filter(id => id && id !== "Campaign ID");

  const uniqIds = [...new Set(ids)];
  if (!uniqIds.length) throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ campaignId –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞");

  // --- 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ ---
  const urlGenerate = "https://api-performance.ozon.ru/api/client/statistics/json";
  const payload = {
    campaigns: uniqIds,
    dateFrom: dateFrom,
    dateTo: dateTo,
    groupBy: "DATE"
  };

  const respGenerate = UrlFetchApp.fetch(urlGenerate, {
    method: "post",
    contentType: "application/json",
    headers: { Authorization: "Bearer " + token },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  const genJson = JSON.parse(respGenerate.getContentText());
  if (!genJson.UUID) throw new Error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + respGenerate.getContentText());
  const uuid = genJson.UUID;
  Logger.log("üì¶ UUID: " + uuid);

  // --- 2. –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ---
  let state = "NOT_STARTED";
  for (let i = 0; i < 30; i++) {
    const urlStatus = "https://api-performance.ozon.ru/api/client/statistics/" + uuid;
    const respStatus = UrlFetchApp.fetch(urlStatus, {
      method: "get",
      headers: { Authorization: "Bearer " + token },
      muteHttpExceptions: true
    });
    const statusJson = JSON.parse(respStatus.getContentText());
    state = statusJson.state || "UNKNOWN";
    Logger.log("‚è≥ –ü–æ–ø—ã—Ç–∫–∞ " + (i+1) + " ‚Üí state=" + state);

    if (state === "OK") break;
    if (state === "ERROR") throw new Error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞");
    Utilities.sleep(3000);
  }
  if (state !== "OK") throw new Error("‚ùå –û—Ç—á—ë—Ç –Ω–µ –≥–æ—Ç–æ–≤: state=" + state);

  // --- 3. –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
  const urlReport = "https://api-performance.ozon.ru/api/client/statistics/report?UUID=" + uuid;
  const respReport = UrlFetchApp.fetch(urlReport, {
    method: "get",
    headers: { Authorization: "Bearer " + token },
    muteHttpExceptions: true
  });

  const reportJson = JSON.parse(respReport.getContentText());
  const campaigns = Object.keys(reportJson);
  if (!campaigns.length) throw new Error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç—á—ë—Ç");

  // --- 4. –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ ---
  const headers = [
    "Campaign ID","Campaign Title","Date",
    "SKU","Title","Price ‚ÇΩ",
    "Views","Clicks","CTR %","ToCart",
    "Avg Bid ‚ÇΩ","Spent ‚ÇΩ",
    "Orders","Orders Money ‚ÇΩ",
    "Models","Models Money ‚ÇΩ","DRR %"
  ];
  const result = [headers];

  campaigns.forEach(cid => {
    const c = reportJson[cid];
    const title = c.title;
    const rows = (c.report && c.report.rows) || [];
    rows.forEach(r => {
      result.push([
        cid,
        title,
        r.date || "",
        r.sku || "",
        r.title || "",
        r.price || "",
        r.views || "",
        r.clicks || "",
        r.ctr || "",
        r.toCart || "",
        r.avgBid || "",
        r.moneySpent || "",
        r.orders || "",
        r.ordersMoney || "",
        r.models || "",
        r.modelsMoney || "",
        r.drr || ""
      ]);
    });
  });

  // --- 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É ---
  sheet.getRange(1,1,result.length,result[0].length).setValues(result);
  Logger.log("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: " + (result.length-1));
}

===== exportOzonAnalytics =====
function exportOzonAnalytics() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = "4 –ê–Ω–∞–ª–∏—Ç–∏–∫–∞";
  const sheet = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);
  sheet.clear();

  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  if (!settings) throw new Error("–ù–µ—Ç –ª–∏—Å—Ç–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'");
  const clientId = settings.getRange("B2").getValue();
  const apiKey   = settings.getRange("B3").getValue();
  const dateFrom = settings.getRange("B4").getValue();
  const dateTo   = settings.getRange("B5").getValue();

  const format = d => Utilities.formatDate(new Date(d), "GMT", "yyyy-MM-dd");
  const url = "https://api-seller.ozon.ru/v1/analytics/data";
  const payload = {
    date_from: format(dateFrom),
    date_to: format(dateTo),
    metrics: [
      "revenue","ordered_units","hits_view_search","hits_view_pdp","hits_view",
      "hits_tocart_search","hits_tocart_pdp","session_view_search","session_view_pdp",
      "conv_tocart_search","returns","cancellations","delivered_units","session_view"
    ],
    dimension: ["sku","day"],
    limit: 1000,
    offset: 0
  };

  Logger.log("üì° POST " + url);

  const resp = UrlFetchApp.fetch(url, {
    method: "post",
    contentType: "application/json",
    headers: { "Client-Id": String(clientId), "Api-Key": String(apiKey) },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  if (resp.getResponseCode() !== 200) throw new Error(resp.getContentText());

  const data = JSON.parse(resp.getContentText()).result?.data || [];
  Logger.log("üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: " + data.length);

  const rows = [[
    "sku","day","revenue ‚Äî –∑–∞–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å—É–º–º—É.","ordered_units ‚Äî –∑–∞–∫–∞–∑–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤.",
    "hits_view_search ‚Äî –ø–æ–∫–∞–∑—ã –≤ –ø–æ–∏—Å–∫–µ –∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.","hits_view_pdp ‚Äî –ø–æ–∫–∞–∑—ã –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞.",
    "hits_view ‚Äî –≤—Å–µ–≥–æ –ø–æ–∫–∞–∑–æ–≤.","hits_tocart_search ‚Äî –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
    "hits_tocart_pdp ‚Äî –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞.","session_view_search ‚Äî —Å–µ—Å—Å–∏–∏ —Å –ø–æ–∫–∞–∑–æ–º –≤ –ø–æ–∏—Å–∫–µ –∏–ª–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.",
    "session_view_pdp ‚Äî —Å–µ—Å—Å–∏–∏ —Å –ø–æ–∫–∞–∑–æ–º –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞.","conv_tocart_search ‚Äî –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
    "returns ‚Äî –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤.","cancellations ‚Äî –æ—Ç–º–µ–Ω–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤.","delivered_units ‚Äî –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤.",
    "session_view ‚Äî –≤—Å–µ–≥–æ —Å–µ—Å—Å–∏–π.","client_id","month"
  ]];

  data.forEach(row => {
    const sku = row.dimensions?.[0]?.id || "";
    const day = row.dimensions?.[1]?.id || "";
    const month = day ? (new Date(day).getMonth() + 1) : "";
    rows.push([
      sku, day,
      row.metrics[0] || 0, row.metrics[1] || 0, row.metrics[2] || 0, row.metrics[3] || 0,
      row.metrics[4] || 0, row.metrics[5] || 0, row.metrics[6] || 0, row.metrics[7] || 0,
      row.metrics[8] || 0, row.metrics[9] || 0, row.metrics[10] || 0, row.metrics[11] || 0,
      row.metrics[12] || 0, row.metrics[13] || 0,
      clientId, month
    ]);
  });

  if (rows.length > 1) {
    sheet.getRange(1,1,rows.length,rows[0].length).setValues(rows);
  }
  Logger.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–∏—Å—Ç '" + sheetName + "'");
}

===== exportOzonProducts =====
function exportOzonProducts() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  if (!settings) throw new Error("–ù–µ—Ç –ª–∏—Å—Ç–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'");

  const clientId = settings.getRange("B2").getValue();
  const apiKey = settings.getRange("B3").getValue();

  Logger.log("üîë ClientId: " + clientId);
  Logger.log("üîë ApiKey: " + apiKey);

  const sheetName = "3 –¢–æ–≤–∞—Ä—ã";
  const sheet = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);
  sheet.clear();

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  sheet.appendRow([
    "–ê—Ä—Ç–∏–∫—É–ª",
    "ID —Ç–æ–≤–∞—Ä–∞",
    "–û—Å—Ç–∞—Ç–∫–∏ FBO",
    "–û—Å—Ç–∞—Ç–∫–∏ FBS",
    "–ê—Ä—Ö–∏–≤",
    "–°–æ —Å–∫–∏–¥–∫–æ–π"
  ]);

  let last_id = "";
  let totalExported = 0;

  do {
    const payload = { limit: 1000, filter: { visibility: "ALL" } };
    if (last_id) payload.last_id = last_id;

    const response = UrlFetchApp.fetch("https://api-seller.ozon.ru/v3/product/list", {
      method: "post",
      contentType: "application/json",
      headers: {
        "Client-Id": String(clientId),
        "Api-Key": String(apiKey)
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    });

    const code = response.getResponseCode();
    if (code !== 200) {
      throw new Error("–û—à–∏–±–∫–∞ HTTP " + code + ": " + response.getContentText());
    }

    const data = JSON.parse(response.getContentText());
    const items = data.result?.items || [];
    Logger.log("üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: " + items.length);

    if (items.length > 0) {
      const rows = items.map(item => [
        item.offer_id || "",
        item.product_id || "",
        item.has_fbo_stocks || false,
        item.has_fbs_stocks || false,
        item.archived || false,
        item.is_discounted || false
      ]);
      sheet.getRange(sheet.getLastRow() + 1, 1, rows.length, rows[0].length).setValues(rows);
    }

    totalExported += items.length;
    last_id = data.result?.last_id || "";
  } while (last_id);

  Logger.log("üèÅ –í—Å–µ–≥–æ –≤—ã–≥—Ä—É–∂–µ–Ω–æ: " + totalExported);
}

===== exportOzonStocks =====
function exportOzonStocks() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = "–û—Å—Ç–∞—Ç–∫–∏";
  const sheet = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);
  sheet.clear();

  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  if (!settings) throw new Error("–ù–µ—Ç –ª–∏—Å—Ç–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'");
  const clientId = settings.getRange("B2").getValue();
  const apiKey   = settings.getRange("B3").getValue();

  Logger.log("üîë ClientId: " + clientId);

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = [
    "sku","offer_id","name",
    "warehouse_id","warehouse_name","cluster_id","cluster_name",
    "available_stock_count","valid_stock_count","expiring_stock_count","excess_stock_count",
    "stock_defect_stock_count","transit_defect_stock_count","other_stock_count","transit_stock_count",
    "requested_stock_count","return_from_customer_stock_count","return_to_seller_stock_count","waiting_docs_stock_count",
    "ads","ads_cluster","days_without_sales","days_without_sales_cluster",
    "idc","idc_cluster","turnover_grade","turnover_grade_cluster"
  ];
  sheet.appendRow(headers);

  // 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ product_id
  let allProductIds = [];
  let last_id = "";
  do {
    const payload = { limit: 1000, filter: { visibility: "ALL" }, last_id };
    const resp = UrlFetchApp.fetch("https://api-seller.ozon.ru/v3/product/list", {
      method: "post",
      contentType: "application/json",
      headers: { "Client-Id": String(clientId), "Api-Key": String(apiKey) },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    });

    if (resp.getResponseCode() !== 200) throw new Error(resp.getContentText());
    const data = JSON.parse(resp.getContentText()).result;
    const items = data?.items || [];

    items.forEach(it => { if (it.product_id) allProductIds.push(String(it.product_id)); });
    last_id = data?.last_id || "";
  } while (last_id);

  Logger.log("üì¶ –ü–æ–ª—É—á–µ–Ω–æ product_id: " + allProductIds.length);

  // 2. –ü–æ–ª—É—á–∞–µ–º SKU –ø–æ product_id (–±–∞—Ç—á–∞–º–∏ –ø–æ 1000)
  let allSkus = [];
  for (let i = 0; i < allProductIds.length; i += 1000) {
    const batch = allProductIds.slice(i, i + 1000);
    const payload = { product_id: batch };

    const resp = UrlFetchApp.fetch("https://api-seller.ozon.ru/v3/product/info/list", {
      method: "post",
      contentType: "application/json",
      headers: { "Client-Id": String(clientId), "Api-Key": String(apiKey) },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    });

    if (resp.getResponseCode() !== 200) throw new Error(resp.getContentText());
    const items = JSON.parse(resp.getContentText()).items || [];
    items.forEach(it => { if (it.sku) allSkus.push(String(it.sku)); });
  }

  Logger.log("‚úÖ –í—Å–µ–≥–æ SKU –ø–æ–ª—É—á–µ–Ω–æ: " + allSkus.length);

  // 3. –¢—è–Ω–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ SKU –±–∞—Ç—á–∞–º–∏ –ø–æ 100
  for (let i = 0; i < allSkus.length; i += 100) {
    const batch = allSkus.slice(i, i + 100);
    const payload = { skus: batch };

    const resp = UrlFetchApp.fetch("https://api-seller.ozon.ru/v1/analytics/stocks", {
      method: "post",
      contentType: "application/json",
      headers: { "Client-Id": String(clientId), "Api-Key": String(apiKey) },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    });

    if (resp.getResponseCode() !== 200) throw new Error(resp.getContentText());
    const items = JSON.parse(resp.getContentText()).items || [];

    const rows = items.map(it => [
      it.sku || "",
      it.offer_id || "",
      it.name || "",
      it.warehouse_id || "",
      it.warehouse_name || "",
      it.cluster_id || "",
      it.cluster_name || "",
      it.available_stock_count || 0,
      it.valid_stock_count || 0,
      it.expiring_stock_count || 0,
      it.excess_stock_count || 0,
      it.stock_defect_stock_count || 0,
      it.transit_defect_stock_count || 0,
      it.other_stock_count || 0,
      it.transit_stock_count || 0,
      it.requested_stock_count || 0,
      it.return_from_customer_stock_count || 0,
      it.return_to_seller_stock_count || 0,
      it.waiting_docs_stock_count || 0,
      it.ads || 0,
      it.ads_cluster || 0,
      it.days_without_sales || 0,
      it.days_without_sales_cluster || 0,
      it.idc || 0,
      it.idc_cluster || 0,
      it.turnover_grade || "",
      it.turnover_grade_cluster || ""
    ]);

    if (rows.length) {
      sheet.getRange(sheet.getLastRow()+1, 1, rows.length, rows[0].length).setValues(rows);
    }

    Logger.log("üì¶ SKU " + (i+1) + "‚Äì" + (i+batch.length) + " –≤—ã–≥—Ä—É–∂–µ–Ω–æ, —Å—Ç—Ä–æ–∫: " + rows.length);
  }

  Logger.log("üèÅ –û—Å—Ç–∞—Ç–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–∏—Å—Ç '" + sheetName + "'");
}

===== exportOzonTransactionTotals =====
function exportOzonTransactionTotals() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ò—Ç–æ–≥–∏";
  const sheet = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);
  sheet.clear();

  // –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  if (!settings) throw new Error("–ù–µ—Ç –ª–∏—Å—Ç–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'");
  const clientId = settings.getRange("B2").getValue();
  const apiKey   = settings.getRange("B3").getValue();
  const dateFrom = settings.getRange("B4").getValue();
  const dateTo   = settings.getRange("B5").getValue();

  const format = d => Utilities.formatDate(new Date(d), "GMT", "yyyy-MM-dd'T'HH:mm:ss'Z'");
  const fromIso = format(dateFrom);
  const toIso   = format(dateTo);

  Logger.log("üîë ClientId: " + clientId);
  Logger.log("üîë ApiKey: " + apiKey);
  Logger.log("üìÖ –ü–µ—Ä–∏–æ–¥: " + fromIso + " ‚Üí " + toIso);

  const url = "https://api-seller.ozon.ru/v3/finance/transaction/totals";
  const payload = {
    date: { from: fromIso, to: toIso },
    posting_number: "",
    transaction_type: "all"
  };

  const resp = UrlFetchApp.fetch(url, {
    method: "post",
    contentType: "application/json",
    headers: {
      "Client-Id": String(clientId),
      "Api-Key": String(apiKey),
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  const code = resp.getResponseCode();
  Logger.log("üîé –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + code);
  if (code !== 200) throw new Error(resp.getContentText());

  const result = JSON.parse(resp.getContentText()).result || {};
  Logger.log("üì¶ –ü–æ–ª—É—á–µ–Ω–æ: " + JSON.stringify(result));

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = [
    "accruals_for_sale ‚Äî —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤",
    "sale_commission ‚Äî —É–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏",
    "processing_and_delivery ‚Äî –ª–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞",
    "refunds_and_cancellations ‚Äî –≤–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ—Ç–º–µ–Ω—ã",
    "services_amount ‚Äî —É—Å–ª—É–≥–∏",
    "compensation_amount ‚Äî –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏",
    "money_transfer ‚Äî –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É",
    "others_amount ‚Äî –ø—Ä–æ—á–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è",
    "client_id",
    "date_from",
    "date_to"
  ];
  sheet.appendRow(headers);

  // –î–∞–Ω–Ω—ã–µ
  sheet.appendRow([
    result.accruals_for_sale || 0,
    result.sale_commission || 0,
    result.processing_and_delivery || 0,
    result.refunds_and_cancellations || 0,
    result.services_amount || 0,
    result.compensation_amount || 0,
    result.money_transfer || 0,
    result.others_amount || 0,
    clientId,
    fromIso,
    toIso
  ]);

  Logger.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∏—Ç–æ–≥–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–∏—Å—Ç '" + sheetName + "'");
}

===== exportOzonTransactions =====
function exportOzonTransactions() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏";
  const sheet = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);
  sheet.clear();

  // –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  if (!settings) throw new Error("–ù–µ—Ç –ª–∏—Å—Ç–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'");
  const clientId = settings.getRange("B2").getValue();
  const apiKey   = settings.getRange("B3").getValue();
  const dateFrom = settings.getRange("B4").getValue();
  const dateTo   = settings.getRange("B5").getValue();

  const format = (d) => Utilities.formatDate(new Date(d), "GMT", "yyyy-MM-dd'T'HH:mm:ss'Z'");
  const fromIso = format(dateFrom);
  const toIso   = format(dateTo);

  Logger.log("üîë ClientId: " + clientId);
  Logger.log("üîë ApiKey: " + apiKey);
  Logger.log("üìÖ –ü–µ—Ä–∏–æ–¥: " + fromIso + " ‚Üí " + toIso);

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = [
    "operation_id",
    "operation_type",
    "operation_type_name",
    "operation_date",
    "amount",
    "type",
    "posting_number",
    "delivery_schema",
    "order_date",
    "warehouse_id",
    "sku",
    "item_name",
    "service_name",
    "service_price"
  ];
  sheet.appendRow(headers);

  let page = 1;
  const pageSize = 1000;
  let totalRows = 0;
  const allRows = [];

  while (true) {
    const url = "https://api-seller.ozon.ru/v3/finance/transaction/list";
    const payload = {
      filter: {
        date: { from: fromIso, to: toIso },
        transaction_type: "all"
      },
      page: page,
      page_size: pageSize
    };

    Logger.log("üì° POST " + url + " page=" + page);
    const resp = UrlFetchApp.fetch(url, {
      method: "post",
      contentType: "application/json",
      headers: {
        "Client-Id": String(clientId),
        "Api-Key": String(apiKey)
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    });

    const code = resp.getResponseCode();
    const text = resp.getContentText();
    Logger.log("üîé –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + code);

    if (code !== 200) {
      Logger.log("‚ùå –û—à–∏–±–∫–∞: " + text);
      break;
    }

    const json = JSON.parse(text).result;
    if (!json || !json.operations || json.operations.length === 0) {
      Logger.log("‚ö†Ô∏è –î–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç.");
      break;
    }

    const batch = json.operations.map(op => {
      const sku = op.items && op.items.length ? op.items[0].sku : "";
      const itemName = op.items && op.items.length ? op.items[0].name : "";
      const serviceName = op.services && op.services.length ? op.services[0].name : "";
      const servicePrice = op.services && op.services.length ? op.services[0].price : "";

      return [
        op.operation_id || "",
        op.operation_type || "",
        op.operation_type_name || "",
        op.operation_date || "",
        op.amount || 0,
        op.type || "",
        op.posting?.posting_number || "",
        op.posting?.delivery_schema || "",
        op.posting?.order_date || "",
        op.posting?.warehouse_id || "",
        sku,
        itemName,
        serviceName,
        servicePrice
      ];
    });

    allRows.push(...batch);

    totalRows += json.operations.length;
    Logger.log("üì¶ –ü–æ–ª—É—á–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: " + json.operations.length + ", –≤—Å–µ–≥–æ: " + totalRows);

    if (page >= json.page_count) break;
    page++;
  }

  if (allRows.length > 0) {
    sheet.getRange(2, 1, allRows.length, allRows[0].length).setValues(allRows);
  }

  Logger.log("‚úÖ –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–∏—Å—Ç '" + sheetName + "'. –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: " + totalRows);
}

===== getOzonSettings =====
function getOzonSettings() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  if (!sheet) throw new Error("–°–æ–∑–¥–∞–π—Ç–µ –ª–∏—Å—Ç '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'");

  // —á–∏—Ç–∞–µ–º 7 —Å—Ç—Ä–æ–∫ (Client-Id, Api-Key, –¥–∞—Ç—ã, —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç, client, secret)
  const values = sheet.getRange(2, 1, 7, 2).getValues();

  const clientId = values[0][1];
  const apiKey = values[1][1];
  const dateFrom = values[2][1];
  const dateTo = values[3][1];
  const serviceAccount = values[4][1];
  const clientPerf = values[5][1];
  const secretPerf = values[6][1];

  return { clientId, apiKey, dateFrom, dateTo, serviceAccount, clientPerf, secretPerf };
}

===== getPerformanceToken =====
function getPerformanceToken() {
  const clientPerf = getSettingValue("Client Performance");
  const secretPerf = getSettingValue("Secret Performance");

  const props = PropertiesService.getScriptProperties();
  const lastTime = props.getProperty("perfTokenTime");
  const token = props.getProperty("perfToken");
  const currentTime = new Date().getTime();

  if (token && lastTime && currentTime - parseInt(lastTime) < 1800000) {
    Logger.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω");
    return token;
  }

  const payload = {
    client_id: clientPerf,
    client_secret: secretPerf,
    grant_type: "client_credentials"
  };

  const resp = UrlFetchApp.fetch("https://api-performance.ozon.ru/api/client/token", {
    method: "post",
    contentType: "application/json",
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  const json = JSON.parse(resp.getContentText());
  if (!json.access_token) throw new Error("–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: " + resp.getContentText());

  props.setProperty("perfToken", json.access_token);
  props.setProperty("perfTokenTime", String(currentTime));

  Logger.log("–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω");
  return json.access_token;
}

===== getSettingValue =====
function getSettingValue(keyName) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  if (!sheet) throw new Error("–ù–µ—Ç –ª–∏—Å—Ç–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'");

  const values = sheet.getRange(1, 1, sheet.getLastRow(), 2).getValues();
  const row = values.find(r => String(r[0]).trim() === keyName);
  if (!row) throw new Error("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: " + keyName);
  return row[1];
}

===== onOpen =====
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu("üì¶ OZON")
    .addItem("üì• –°–∫–∞—á–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", "exportOzonProducts")
    .addItem("üìä –°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É", "exportOzonAnalytics")
    .addItem("üí∞ –°–∫–∞—á–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥", "exportOzonTransactions")
    .addItem("üìë –°–∫–∞—á–∞—Ç—å –∏—Ç–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", "exportOzonTransactionTotals")
    .addItem("üì¶ –°–∫–∞—á–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏", "exportOzonStocks")
    .addSeparator()
    .addItem("üìà –†–µ–∫–ª–∞–º–∞ ‚Äî –¥–Ω–µ–≤–Ω–∞—è", "exportOzonAdsDaily")
    .addItem("üìà –†–µ–∫–ª–∞–º–∞ ‚Äî –æ—Ç—á—ë—Ç –ü—Ä–æ–¥—É–∫—Ç—ã", "exportOzonAdsProductsReport")
    .addItem("üìà –†–µ–∫–ª–∞–º–∞ ‚Äî –æ—Ç—á—ë—Ç –ó–∞–∫–∞–∑—ã", "exportOzonAdsOrdersReport")
    .addItem("üìà –†–µ–∫–ª–∞–º–∞ ‚Äî –∫–∞–º–ø–∞–Ω–∏–∏", "exportOzonAdsCampaigns")
    .addItem("üìâ –†–µ–∫–ª–∞–º–∞ ‚Äî —Ä–∞—Å—Ö–æ–¥—ã", "exportOzonAdsExpense")
    .addToUi();
}

===== parseNumber =====
function parseNumber(val) {
  if (!val) return 0;
  if (typeof val === "number") return val;
  return Number(val.toString().replace(",",".").replace(/\s/g,"")) || 0;
}

===== parseOrderDate =====
function parseOrderDate(d) {
  if (!d) return "";
  if (Object.prototype.toString.call(d) === "[object Date]") {
    return Utilities.formatDate(d, "GMT+2", "yyyy-MM-dd");
  }
  const parts = d.toString().split(".");
  if (parts.length === 3) {
    return `${parts[2]}-${parts[1].padStart(2,"0")}-${parts[0].padStart(2,"0")}`;
  }
  return d;
}

===== testAdsHeaders =====
function testAdsHeaders() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();

  const sheets = [
    "–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ò—Ç–æ–≥",
    "–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ü—Ä–æ–¥—É–∫—Ç—ã",
    "–û–∑–æ–Ω –†–µ–∫–ª–∞–º–∞ –ó–∞–∫–∞–∑—ã"
  ];

  sheets.forEach(name => {
    const sh = ss.getSheetByName(name);
    if (!sh) {
      Logger.log("‚ùå –ù–µ—Ç –ª–∏—Å—Ç–∞: " + name);
      return;
    }
    const headers = sh.getDataRange().getValues()[0];
    Logger.log("‚úÖ " + name + " ‚Äî " + JSON.stringify(headers));
  });
}

===== testAnalyticsShort =====
function testAnalyticsShort() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  const clientId = settings.getRange("B2").getValue();
  const apiKey   = settings.getRange("B3").getValue();

  const url = "https://api-seller.ozon.ru/v1/analytics/data";
  const payload = {
    date_from: "2025-07-01",
    date_to: "2025-07-05",
    metrics: ["revenue","ordered_units"],
    dimension: ["sku","day"],
    limit: 5,
    offset: 0
  };

  const resp = UrlFetchApp.fetch(url, {
    method: "post",
    contentType: "application/json",
    headers: {
      "Client-Id": String(clientId),
      "Api-Key": String(apiKey)
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  Logger.log("–ö–æ–¥: " + resp.getResponseCode());
  Logger.log("–û—Ç–≤–µ—Ç: " + resp.getContentText());
}

===== testCheckOzonAdsOrdersReport =====
function testCheckOzonAdsOrdersReport() {
  const token = getPerformanceToken();
  const uuid = "3c57463a-3972-440a-b4fc-a2f3d896f277"; // UUID –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —à–∞–≥–∞

  const url = "https://api-performance.ozon.ru/api/client/statistics/" + uuid;
  const resp = UrlFetchApp.fetch(url, {
    method: "get",
    headers: { Authorization: "Bearer " + token },
    muteHttpExceptions: true
  });

  Logger.log("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + resp.getResponseCode());
  Logger.log("–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: " + resp.getContentText());
}

===== testDownloadOzonAdsOrdersReport =====
function testDownloadOzonAdsOrdersReport() {
  const token = getPerformanceToken();
  const uuid = "3c57463a-3972-440a-b4fc-a2f3d896f277"; // UUID –∏–∑ —à–∞–≥–∞ 1

  const url = "https://api-performance.ozon.ru/api/client/statistics/report?UUID=" + uuid;
  const resp = UrlFetchApp.fetch(url, {
    method: "get",
    headers: { Authorization: "Bearer " + token },
    muteHttpExceptions: true
  });

  Logger.log("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + resp.getResponseCode());
  Logger.log("–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤: " + resp.getContentText().slice(0, 500));
}

===== testGetSkus =====
function testGetSkus() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = "SKU";
  const sheet = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);
  sheet.clear();

  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  if (!settings) throw new Error("–ù–µ—Ç –ª–∏—Å—Ç–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'");
  const clientId = settings.getRange("B2").getValue();
  const apiKey   = settings.getRange("B3").getValue();

  // 1. –°–æ–±–∏—Ä–∞–µ–º product_id
  let last_id = "";
  let productIds = [];
  do {
    const payload = { limit: 1000, last_id: last_id, filter: { visibility: "ALL" } };
    const resp = UrlFetchApp.fetch("https://api-seller.ozon.ru/v3/product/list", {
      method: "post",
      contentType: "application/json",
      headers: { "Client-Id": String(clientId), "Api-Key": String(apiKey) },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    });
    if (resp.getResponseCode() !== 200) throw new Error(resp.getContentText());
    const data = JSON.parse(resp.getContentText()).result;
    const items = data?.items || [];
    items.forEach(it => productIds.push(it.product_id));
    last_id = data?.last_id || "";
  } while (last_id);

  Logger.log("üì¶ –ü–æ–ª—É—á–µ–Ω–æ product_id: " + productIds.length);

  // 2. –ë–µ—Ä—ë–º SKU –ø–æ product_id –±–∞—Ç—á–∞–º–∏ –ø–æ 1000
  let allSkus = [];
  for (let i = 0; i < productIds.length; i += 1000) {
    const batch = productIds.slice(i, i + 1000);
    const payloadInfo = { product_id: batch };
    const resp = UrlFetchApp.fetch("https://api-seller.ozon.ru/v3/product/info/list", {
      method: "post",
      contentType: "application/json",
      headers: { "Client-Id": String(clientId), "Api-Key": String(apiKey) },
      payload: JSON.stringify(payloadInfo),
      muteHttpExceptions: true
    });
    if (resp.getResponseCode() !== 200) throw new Error(resp.getContentText());
    const items = JSON.parse(resp.getContentText()).items || [];
    items.forEach(it => { if (it.sku) allSkus.push(it.sku); });
  }

  Logger.log("‚úÖ –í—Å–µ–≥–æ SKU –ø–æ–ª—É—á–µ–Ω–æ: " + allSkus.length);

  if (allSkus.length) {
    sheet.getRange(1, 1, allSkus.length, 1).setValues(allSkus.map(s => [s]));
  }
}

===== testOzonAdsCampaigns =====
function testOzonAdsCampaigns() {
  const token = getPerformanceToken(); // –±–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ 8 –†–µ–∫–ª–∞–º–∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  const url = "https://api-performance.ozon.ru/api/client/campaign?page=1&pageSize=50";

  const resp = UrlFetchApp.fetch(url, {
    method: "get",
    headers: { Authorization: "Bearer " + token },
    muteHttpExceptions: true
  });

  Logger.log("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + resp.getResponseCode());
  Logger.log("–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: " + resp.getContentText());
}

===== testOzonAdsCampaignsIDs =====
function testOzonAdsCampaignsIDs() {
  const token = getPerformanceToken(); // –±–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ 8 –†–µ–∫–ª–∞–º–∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  const url = "https://api-performance.ozon.ru/api/client/campaign?page=1&pageSize=100";

  const resp = UrlFetchApp.fetch(url, {
    method: "get",
    headers: { Authorization: "Bearer " + token },
    muteHttpExceptions: true
  });

  if (resp.getResponseCode() !== 200) {
    throw new Error("–û—à–∏–±–∫–∞ HTTP " + resp.getResponseCode() + ": " + resp.getContentText());
  }

  const json = JSON.parse(resp.getContentText());
  const list = json.list || [];
  Logger.log("üìä –ü–æ–ª—É—á–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: " + list.length);

  list.forEach(c => {
    Logger.log("ID: " + c.id + " | Title: " + c.title + " | State: " + c.state);
  });
}

===== testOzonAdsDailyRaw =====
function testOzonAdsDailyRaw() {
  const settings = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  const dateFrom = settings.getRange("B4").getValue();
  const dateTo   = settings.getRange("B5").getValue();

  const format = d => Utilities.formatDate(new Date(d), Session.getScriptTimeZone(), "yyyy-MM-dd");
  const fromStr = format(dateFrom);
  const toStr   = format(dateTo);

  const token = getPerformanceToken();

  const url = "https://api-performance.ozon.ru/api/client/statistics/daily/json"
    + "?dateFrom=" + fromStr + "&dateTo=" + toStr;

  const resp = UrlFetchApp.fetch(url, {
    method: "get",
    headers: { Authorization: "Bearer " + token },
    muteHttpExceptions: true
  });

  Logger.log("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + resp.getResponseCode());
  Logger.log("RAW JSON: " + resp.getContentText().slice(0, 2000)); // –ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤
}

===== testOzonAdsExpense =====
function testOzonAdsExpense() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  if (!settings) throw new Error("–ù–µ—Ç –ª–∏—Å—Ç–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'");

  const dateFrom = settings.getRange("B4").getValue();
  const dateTo   = settings.getRange("B5").getValue();

  const format = d => Utilities.formatDate(new Date(d), Session.getScriptTimeZone(), "yyyy-MM-dd");
  const fromStr = format(dateFrom);
  const toStr   = format(dateTo);

  const token = getPerformanceToken();

  const url = "https://api-performance.ozon.ru/api/client/statistics/expense/json" +
              "?dateFrom=" + fromStr +
              "&dateTo=" + toStr;

  const resp = UrlFetchApp.fetch(url, {
    method: "get",
    headers: { Authorization: "Bearer " + token },
    muteHttpExceptions: true
  });

  Logger.log("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + resp.getResponseCode());
  Logger.log("–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: " + resp.getContentText().slice(0, 1000));
}

===== testOzonAdsOrdersReport =====
function testOzonAdsOrdersReport() {
  const settings = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  const dateFrom = new Date(settings.getRange("B4").getValue());
  const dateTo   = new Date(settings.getRange("B5").getValue());
  const token = getPerformanceToken();

  const url = "https://api-performance.ozon.ru/api/client/statistic/orders/generate/json";
  const payload = { 
    from: dateFrom.toISOString(), 
    to: dateTo.toISOString() 
  };

  const resp = UrlFetchApp.fetch(url, {
    method: "post",
    contentType: "application/json",
    headers: { Authorization: "Bearer " + token },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  Logger.log("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + resp.getResponseCode());
  Logger.log("–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: " + resp.getContentText());
}

===== testOzonAdsProductsReport =====
function testOzonAdsProductsReport() {
  const token = getPerformanceToken();

  // –¥–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤—ã–µ (–≤–æ–∑—å–º–∏ –∞–≤–≥—É—Å—Ç, —á—Ç–æ–±—ã —Å–æ–≤–ø–∞–¥–∞–ª–æ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏)
  const from = "2025-08-01T00:00:00Z";
  const to   = "2025-08-31T23:59:59Z";

  // --- 1. –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
  const urlGen = "https://api-performance.ozon.ru/api/client/statistic/products/generate/json";
  const respGen = UrlFetchApp.fetch(urlGen, {
    method: "post",
    headers: { 
      Authorization: "Bearer " + token,
      "Content-Type": "application/json"
    },
    payload: JSON.stringify({ from, to }),
    muteHttpExceptions: true
  });

  if (respGen.getResponseCode() !== 200) {
    throw new Error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + respGen.getContentText());
  }

  const uuid = JSON.parse(respGen.getContentText()).UUID;
  Logger.log("üü¢ UUID: " + uuid);

  // --- 2. –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á—ë—Ç –ø–æ UUID
  const urlReport = "https://api-performance.ozon.ru/api/client/statistics/report?UUID=" + uuid;
  Utilities.sleep(3000); // –∂–¥—ë–º 3 —Å–µ–∫ —á—Ç–æ–±—ã —É—Å–ø–µ–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è
  const respReport = UrlFetchApp.fetch(urlReport, {
    method: "get",
    headers: { Authorization: "Bearer " + token },
    muteHttpExceptions: true
  });

  Logger.log("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + respReport.getResponseCode());
  Logger.log("–ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤: " + respReport.getContentText().substring(0, 1000));
}

===== testOzonAdsProductsStep1 =====
function testOzonAdsProductsStep1() {
  const settings = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  const dateFrom = new Date(settings.getRange("B4").getValue());
  const dateTo   = new Date(settings.getRange("B5").getValue());
  const token = getPerformanceToken();

  const url = "https://api-performance.ozon.ru/api/client/statistic/products/generate/json";
  const payload = { from: dateFrom.toISOString(), to: dateTo.toISOString() };

  const resp = UrlFetchApp.fetch(url, {
    method: "post",
    contentType: "application/json",
    headers: { Authorization: "Bearer " + token },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  Logger.log("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + resp.getResponseCode());
  Logger.log("–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: " + resp.getContentText());
}

===== testOzonAdsProductsStep2 =====
function testOzonAdsProductsStep2() {
  const token = getPerformanceToken();
  const uuid = "___–ü–û–î–°–¢–ê–í–¨_UUID_–ò–ó_STEP1___";

  const url = "https://api-performance.ozon.ru/api/client/statistics/" + uuid;
  const resp = UrlFetchApp.fetch(url, {
    method: "get",
    headers: { Authorization: "Bearer " + token },
    muteHttpExceptions: true
  });

  Logger.log("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + resp.getResponseCode());
  Logger.log("–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: " + resp.getContentText());
}

===== testOzonAdsProductsStep3 =====
function testOzonAdsProductsStep3() {
  const token = getPerformanceToken();
  const uuid = "___–ü–û–î–°–¢–ê–í–¨_UUID_–ò–ó_STEP1___";

  const url = "https://api-performance.ozon.ru/api/client/statistics/report?UUID=" + uuid;
  const resp = UrlFetchApp.fetch(url, {
    method: "get",
    headers: { Authorization: "Bearer " + token },
    muteHttpExceptions: true
  });

  Logger.log("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + resp.getResponseCode());
  Logger.log("–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤: " + resp.getContentText().slice(0, 500));
}

===== testOzonStocks =====
function testOzonStocks() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  const clientId = settings.getRange("B2").getValue();
  const apiKey   = settings.getRange("B3").getValue();

  const url = "https://api-seller.ozon.ru/v1/analytics/stocks";
  const payload = {
    skus: ["1805436617","2104149519","1939919001"], // ‚ö°Ô∏è –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–≤–æ–∏ SKU
    item_tags: ["ITEM_ATTRIBUTE_NONE"],
    turnover_grades: [],
    cluster_ids: [],
    warehouse_ids: []
  };

  const resp = UrlFetchApp.fetch(url, {
    method: "post",
    contentType: "application/json",
    headers: {
      "Client-Id": String(clientId),
      "Api-Key": String(apiKey)
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  Logger.log("–ö–æ–¥: " + resp.getResponseCode());
  Logger.log("–û—Ç–≤–µ—Ç: " + resp.getContentText());
}

===== testOzonTransactionTotals =====
function testOzonTransactionTotals() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  const clientId = settings.getRange("B2").getValue();
  const apiKey   = settings.getRange("B3").getValue();
  const dateFrom = new Date("2025-07-01T00:00:00Z");
  const dateTo   = new Date("2025-07-31T23:59:59Z");

  const url = "https://api-seller.ozon.ru/v3/finance/transaction/totals";
  const payload = {
    date: {
      from: dateFrom.toISOString(),
      to: dateTo.toISOString()
    },
    posting_number: "",
    transaction_type: "all"
  };

  const resp = UrlFetchApp.fetch(url, {
    method: "post",
    contentType: "application/json",
    headers: {
      "Client-Id": String(clientId),
      "Api-Key": String(apiKey),
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  Logger.log("–ö–æ–¥: " + resp.getResponseCode());
  Logger.log("–û—Ç–≤–µ—Ç: " + resp.getContentText());
}

===== testTransactionsList =====
function testTransactionsList() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const settings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
  const clientId = settings.getRange("B2").getValue();
  const apiKey   = settings.getRange("B3").getValue();

  const url = "https://api-seller.ozon.ru/v3/finance/transaction/list";
  const payload = {
    filter: {
      date: {
        from: "2025-07-01T00:00:00.000Z",
        to:   "2025-07-02T00:00:00.000Z"
      },
      transaction_type: "all"
    },
    page: 1,
    page_size: 5
  };

  const resp = UrlFetchApp.fetch(url, {
    method: "post",
    contentType: "application/json",
    headers: {
      "Client-Id": String(clientId),
      "Api-Key": String(apiKey)
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  Logger.log("–ö–æ–¥: " + resp.getResponseCode());
  Logger.log("–û—Ç–≤–µ—Ç: " + resp.getContentText());
}
